open! Core
open! Import

let dashes_to_underscores : string -> string =
  String.map ~f:(function
    | '-' -> '_'
    | c -> c)
;;

let make ~date ~service =
  let extra_deps =
    match service with
    | "s3" -> [ "core_unix"; "core_unix.time_unix" ]
    | _ -> []
  in
  let library =
    let service_unders =
      service
      |> String.map ~f:(function
           | '-' -> '_'
           | c -> c)
    in
    let extra_deps = String.concat ~sep:" " extra_deps in
    [%string
      {|
  (library
    (name awsm_%{service_unders})
    (public_name awsm-%{service})
    (libraries awsm %{extra_deps})
    (flags :standard -open Core -open Printf)
    (ocamlopt_flags (-linscan))
    (preprocess (pps ppx_jane))
    (synopsis "OCaml AWS %{service} API.")
    (inline_tests))
       |}]
  in
  let endpoints_ml =
    sprintf
      {|
  (rule
    (targets endpoints.ml)
    (deps (:service %%{project_root}/vendor/botocore/botocore/data/%s/%s/service-2.json))
    (action (run %%{bin:awsm-codegen} service endpoints
                  --impl endpoints.ml
                  --service %%{service})))
|}
      service
      date
  in
  let num_submodules =
    match service with
    | "ec2" -> 8
    | "ssm" | "iot" | "rds" | "sagemaker" -> 2
    | _ -> 0
  in
  let value_modules =
    num_submodules |> List.init ~f:(sprintf "values_%d.ml") |> String.concat ~sep:" "
  in
  let sub_flags =
    num_submodules
    |> List.init ~f:(sprintf "--sub values_%d.ml")
    |> String.concat ~sep:" "
  in
  let values_ml =
    [%string
      {|
(rule
  (targets values.ml %{value_modules})
  (deps (:service %%{"{"}project_root}/vendor/botocore/botocore/data/%{service}/%{date}/service-2.json))
  (action (run %%{"{"}bin:awsm-codegen} service values
                --service-id %{service}
                --impl values.ml %{sub_flags}
                --service %%{"{"}service})))
      |}]
  in
  [%string
    ";; do not edit! generated by awsm-codegen\n%{library}\n%{endpoints_ml}\n%{values_ml}"]
;;

let make_io (io_kind : [ `Async | `Lwt ]) ~date ~service =
  let io =
    match io_kind with
    | `Async -> "async"
    | `Lwt -> "lwt"
  in
  let service_under =
    service
    |> String.map ~f:(function
         | '-' -> '_'
         | c -> c)
  in
  let io_cap = String.capitalize io in
  let library =
    [%string
      {|
(library
  (name awsm_%{service_under}_%{io})
  (flags (:standard -open Core -open %{io_cap}))
  (public_name awsm-%{service}-%{io})
  (libraries awsm-%{service} awsm-%{io})
  (preprocess (pps ppx_jane))
  (inline_tests))
      |}]
  in
  let num_submodules =
    match service with
    | "ec2" -> 3
    | "iot" | "rds" | "sagemaker" -> 2
    | _ -> 0
  in
  let cli_ml =
    match io_kind with
    | `Lwt -> ""
    | `Async ->
      let value_modules =
        num_submodules |> List.init ~f:(sprintf "cli_%d.ml") |> String.concat ~sep:" "
      in
      let maybe_submodule_flags =
        num_submodules
        |> List.init ~f:(sprintf "--sub cli_%d.ml")
        |> String.concat ~sep:" "
      in
      [%string
        {|
(rule
(targets cli.ml %{value_modules})
(deps (:service %{"%{"}project_root}/vendor/botocore/botocore/data/%{service}/%{date}/service-2.json))
(action (run %{"%{"}bin:awsm-codegen} service-io cli
 --impl cli.ml %{maybe_submodule_flags}
 --service %{"%{"}service})))
    |}]
  in
  let io_ml_mli =
    [%string
      {|
(rule
(targets io.ml io.mli)
(deps (:service %%{"{"}project_root}/vendor/botocore/botocore/data/%{service}/%{date}/service-2.json))
(action (run %%{"{"}bin:awsm-codegen} service-io io
  --service %%{"{"}service}
  --impl io.ml
  --intf io.mli
  --base-module Awsm_%{service_under}
  --io-subsystem %{io})))
    |}]
  in
  let values_ml =
    [%string
      {|
(rule
 (targets values.ml)
 (action (with-stdout-to %%{"{"}targets} (run %%{"{"}bin:awsm-codegen} service-io values
   --service %{service}
 ))))
    |}]
  in
  [%string
    ";; do not edit! generated by awsm-codegen!\n\
     %{library}\n\
     %{cli_ml}\n\
     %{io_ml_mli}\n\
     %{values_ml}"]
;;

let make_cli_async ~service =
  let service_ = dashes_to_underscores service in
  let executable =
    sprintf
      {|
  (executable
    (package awsm-%s-async)
    (name awsm_%s)
    (flags (:standard -open Core -open Async))
    (public_name awsm-%s)
    (libraries awsm-%s-async awsm-async core_unix.command_unix)
    (preprocess (pps ppx_jane)))
  |}
      service
      service_
      service
      service
  in
  let script =
    let target = sprintf "awsm_%s.ml" service_ in
    [%string
      {|
(rule
  (targets %{target})
  (action (with-stdout-to %%{"{"}targets} (run %%{"{"}bin:awsm-codegen} cli script
    --service %{service}
  ))))|}]
  in
  sprintf ";; do not edit! generated by awsm-codegen!\n%s\n%s" executable script
;;
